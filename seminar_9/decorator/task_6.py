"""
–ú–æ–¥—É–ª—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º wraps.
"""
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–∏–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä wraps –≤
# –∫–∞–∂–¥—ã–π –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.

from typing import Callable
import random
import json
from pathlib import Path
from functools import wraps

__all__ = ['guess']


def check(func: Callable):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

    :param func: –§—É–Ω–∫—Ü–∏—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞,
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é.
    """
    @wraps(func)
    def check_setting(*args, **kwargs):
        num, att = args
        if not (1 <= num <= 1_000):
            num = random.randint(1, 1_000)
        if not (1 <= att <= 10):
            att = random.randint(1, 10)
        return func(num, att, **kwargs)

    return check_setting


def save_json(write_fie: str = 'info_decor.json'):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª JSON.

    :param write_fie: –§–∞–π–ª JSON
    :return:
    """

    def wrapper_1(func: Callable):

        @wraps(func)
        def write_json(*args, **kwargs):
            """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ JSON —Ñ–∞–π–ª–∞.

            :param args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,
            :param kwargs: –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,
            :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
            """
            load_list = []
            info_dict = {}
            p = Path(Path.cwd() / write_fie)
            for item in Path.cwd().iterdir():
                if item == p and item.is_file():
                    with open(p, 'r', encoding='utf-8') as f_read:
                        load_list = json.load(f_read)
            info_dict['args_func'] = args
            info_dict['kwargs_func'] = kwargs
            result_func = func(*args, **kwargs)
            info_dict['return_func'] = result_func
            load_list.append(info_dict)
            with open(p, 'w', encoding='utf-8') as f_write:
                json.dump(load_list, f_write, ensure_ascii=False)
            return result_func

        return write_json

    return wrapper_1


def count_print(count: int = 5):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏.

    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    :return:
    """

    def wrapper_2(func: Callable):
        @wraps(func)
        def count_func(*args, **kwargs):
            rez_str = None
            for i in range(count):
                print(f'\n–¶–∏–∫–ª ‚Ññ{i + 1}')
                rez_str = func(*args, **kwargs)
                print(rez_str)
            return rez_str

        return count_func

    return wrapper_2


@count_print(3)
@save_json('guess.json')
@check
def guess(number: int, attempts: int, /, *, inf_str: str):
    """
    –§—É–Ω–∫—Ü–∏—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞.

    :param number: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ,
    :param attempts: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,
    :param inf_str: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    for i in range(attempts):
        number_ = input(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ')
        if number_.isdigit():
            if number == int(number_):
                return inf_str + '–£—Ä–∞ –≤—ã —É–≥–∞–¥–∞–ª–∏!'
            else:
                if attempts - i - 1:
                    print(f'–ù–µ —É–≥–∞–¥–∞–ª–∏, –æ—Å—Ç–∞–ª–æ—Å—å {attempts - i - 1} –ø–æ–ø—ã—Ç–æ–∫.')
                else:
                    return inf_str + '–ù–µ —É–≥–∞–¥–∞–ª–∏, –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã'
        else:
            if attempts - i - 1:
                print(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –û—Å—Ç–∞–ª–æ—Å—å {attempts - i - 1} –ø–æ–ø—ã—Ç–æ–∫.')
            else:
                return inf_str + '–ù–µ —É–≥–∞–¥–∞–ª–∏, –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã'


if __name__ == '__main__':
    help(guess)
    guess(100, 3, inf_str='–†–µ–∑—É–ª—å—Ç–∞—Ç: ')
