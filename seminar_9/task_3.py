"""
–ú–æ–¥—É–ª—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ JSON —Ñ–∞–π–ª
"""
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω
# —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
# üìå –ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á
# json —Å–ª–æ–≤–∞—Ä—è.
# üìå –î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç
# –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# üìå –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π
# —Ñ—É–Ω–∫—Ü–∏–∏.

import random
from functools import wraps
from typing import Callable
import json
from pathlib import Path

__all__ = ['decor_to_json']


def decor(write_fie: str = 'info_decor.json'):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.

    :param write_fie: –§–∞–π–ª JSON
    :return:
    """
    def info_func(func: Callable):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.

        :param func: –î–µ–∫–æ—Ä–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        :return:
        """

        @wraps(func)
        def write_json(*args, **kwargs):
            """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ JSON —Ñ–∞–π–ª–∞.

            :param args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,
            :param kwargs: –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,
            :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
            """
            load_list = []
            info_dict = {}
            p = Path(Path.cwd() / write_fie)
            for item in Path.cwd().iterdir():
                if item == p and item.is_file():
                    with open(p, 'r', encoding='utf-8') as f_read:
                        load_list = json.load(f_read)
            info_dict['name_func'] = func.__name__
            info_dict['args_func'] = args
            info_dict['kwargs_func'] = kwargs
            result_func = func(*args, **kwargs)
            info_dict['return_func'] = result_func
            load_list.append(info_dict)
            with open(p, 'w', encoding='utf-8') as f_write:
                json.dump(load_list, f_write, ensure_ascii=False)
            return result_func

        return write_json

    return info_func


@decor()
def decor_to_json(rand_min: int, rand_max: int, /, *, info_str: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.

    :param rand_min: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞,
    :param rand_max: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞,
    :param info_str: —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
    :return: —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    return info_str + ' ' + str(random.randint(rand_min, rand_max))


if __name__ == '__main__':
    print(decor_to_json(1, 10, info_str='–†–µ–∑—É–ª—å—Ç–∞—Ç'))
