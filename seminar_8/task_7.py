"""
–ú–æ–¥—É–ª—å —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞
"""

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ7
# üìå –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–π–ª –±–µ–∑
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
# üìå –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –µ–≥–æ –∫–∞–∫ pickle —Å—Ç—Ä–æ–∫—É.

__all__ = ['read_csv']
import pickle


def read_csv(file_csv: str) -> tuple[bytes, bytes]:
    """
    –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫

    :param file_csv: CSV —Ñ–∞–π–ª
    :return: –±–∞–π—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: [0] - CSV —Ñ–∞–π–ª, [1] - —Å–ª–æ–≤–∞—Ä—å
    """
    result_str = ''
    with open(file_csv, 'r', encoding='utf-8') as f_read:
        for row in f_read:
            result_str += row
    str_bytes = pickle.dumps(result_str)

    result_list = []
    with open(file_csv, 'r', encoding='utf-8') as f_read_:
        for i, row_ in enumerate(f_read_, 0):
            if i == 0:
                key_1, key_2, key_3, key_4, key_5 = row_[:-1].split(',')
            else:
                val_1, val_2, val_3, val_4, val_5 = row_[:-1].split(',')
                result_list.append({key_1: val_1, key_2: val_2, key_3: val_3, key_4: val_4, key_5: val_5})
    dict_bytes = pickle.dumps(result_list)

    return str_bytes, dict_bytes


if __name__ == '__main__':
    list_bytes = read_csv('test_folder\\user_upgrade.csv')
    print(pickle.loads(list_bytes[0]))
    print()
    print(pickle.loads(list_bytes[1]))

