"""
–ú–æ–¥—É–ª—å —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
"""
# üìå –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
# –æ–±—Ö–æ–¥–∏—Ç –µ—ë –∏ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤
# —Ñ–∞–π–ª—ã json, csv –∏ pickle.
#     ‚óã –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
#     ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —ç—Ç–æ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
#     ‚óã –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö, –∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ä–∞–∑–º–µ—Ä
# —Ñ–∞–π–ª–æ–≤ –≤ –Ω–µ–π —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–∫–µ –∏ –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
# –ø–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.

__all__ = ['info_folder', 'generate_folder_and_file']

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ generate_folder_and_file
from file_func.task_6 import any_file_generator_to_folder
from file_func.task_home_work import rename_file
import shutil
from pathlib import Path
from file_func.task_7 import sort_file
# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ info_folder
import os
import json
import csv
import pickle


def info_folder(folder: str, file_json: str, file_csv: str, file_pickle: str):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    :param folder: –ü–∞–ø–∫–∞ –æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–µ–Ω –æ—Ç—á–µ—Ç
    :param file_json: –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ JSON
    :param file_csv: –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ CSV
    :param file_pickle: –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ pickle
    :return:
    """
    list_path = []
    list_info = []
    for dir_path, *_ in os.walk(Path.cwd() / folder):
        list_path.append(dir_path)
    for path_ in list_path:
        size_dir = 0
        for path_file, _, file_mame in os.walk(path_):
            for f_name in file_mame:
                size_dir += os.path.getsize(f'{path_file}\\{f_name}')
        *_, dir_name = path_.split('\\')
        len_dir_name = len(dir_name)+1
        p_folder = str(path_)[:-len_dir_name]
        list_info.append({'parent_folder': p_folder, 'name': dir_name, 'type_obj': 'folder', 'size_obj': size_dir})

    for path_, _, fl_name in os.walk(Path.cwd() / folder):
        for fl in fl_name:
            size_fl = os.path.getsize(f'{path_}\\{fl}')
            list_info.append({'parent_folder': path_, 'name': fl, 'type_obj': 'file', 'size_obj': size_fl})

    with (open(file_json, 'w', encoding='utf-8') as f_json,
          open(file_csv, 'w', newline='', encoding='utf-8') as f_csv,
          open(file_pickle, 'wb') as f_pickle):
        json.dump(list_info, f_json, ensure_ascii=False)
        csv_write = csv.writer(f_csv, dialect='excel', delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        csv_write.writerow(list(list_info[0].keys()))
        for item in list_info:
            csv_write.writerow(list(item.values()))
        pickle.dump(list_info, f_pickle)


def generate_folder_and_file(directory: str, file_dict: dict, sort_dict: dict, file_name: str = None, n_dig: int = 5,
                             range_original: list = None):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ç –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã.

    :param directory: –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    :param file_dict: –§–∞–π–ª–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å: –∫–ª—é—á - —Ç–∏–ø —Ñ–∞–π–ª–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    :param sort_dict: –°–ª–æ–≤–∞—Ä—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤: –∫–ª—é—á - –∫–∞—Ç–∞–ª–æ–≥, –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    :param file_name: –ñ–µ–ª–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–æ–≤
    :param n_dig: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
    :param range_original: –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [3, 6] –±–µ—Ä—É—Ç—Å—è –±—É–∫–≤—ã —Å 3 –ø–æ 6 –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    :return:
    """
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    del_folder, *_ = directory.split('\\')
    p = Path(Path().cwd())
    for obj in p.iterdir():
        if obj == Path(Path().cwd() / del_folder) and obj.is_dir():
            shutil.rmtree(Path().cwd() / del_folder)
            break
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    list_f = directory.split('\\')
    str_f = ''
    for f in list_f:
        str_f += f'{f}\\'
        Path(Path().cwd() / str_f).mkdir()
    # –ì–µ–Ω–µ—Ä–∏–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∑–∞–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    any_file_generator_to_folder(directory, **file_dict)
    # –î–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–∞–º
    for key_dict in file_dict:
        rename_file(folder=directory, type_file_original=key_dict, name=file_name, n_digits=n_dig,
                    range_original=range_original)
    # –†–∞—Å–∫–∏–¥—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞–ø–∫–∞–º
    sort_file(directory, **sort_dict)


if __name__ == '__main__':
    dir_gen = 'test_folder\\other\\NoName\\–ø—Ä–æ—Å—Ç–æ_–ø–∞–ø–∫–∞'
    file_gen = dict(txt=3, doc=1, pdf=2)
    sort_fl = dict(–í–∏–¥–µ–æ=['avi', 'mp4'], –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è=['bmp', 'jpg', 'png'], –î–æ–∫—É–º–µ–Ω—Ç—ã=['doc', 'exl', 'pdf'])
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏
    generate_folder_and_file(directory=dir_gen, file_dict=file_gen, sort_dict=sort_fl, file_name='file_')
    # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç—ã –æ —Ñ–∞–π–ª–∞—Ö –∏ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
    info_folder('test_folder', 't.json', 't.csv', 't.pickle')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á—Ç–µ–Ω–∏–µ pickle —Ñ–∞–π–ª
    with (open('t.pickle', 'rb') as f_read):
        print(pickle.load(f_read))
