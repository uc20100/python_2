# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ 8 –ø—Ä–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö,
# –≥–¥–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∏–º—è, –ª–∏—á–Ω—ã–π
# –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7) —Å–æ—Ö—Ä–∞–Ω—è—è
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤
# —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
# –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

from pathlib import Path
import json


def create_user_json(file_json: str = 'users.json'):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ JSON —Ñ–∞–π–ª

    :param file_json: JSON —Ñ–∞–π–ª
    :return:
    """
    while True:
        list_value = list(input('–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ò–º—è, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (1-7) '
                                '–∏–ª–∏ "q" –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞: ').split())
        if len(list_value) == 1 and str(list_value[0]).lower() == 'q':
            print('–í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞')
            break
        if len(list_value) == 3:
            name, identifier, level = list_value
            if level.isdigit():
                if not (1 <= int(level) <= 7):
                    print('–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 7')
                else:
                    json_dict = dict()
                    if Path(Path.cwd() / file_json).is_file():
                        with open(file_json, 'r', encoding='utf-8') as fj:
                            json_dict = json.load(fj)
                    for key_level in json_dict:
                        if identifier in json_dict[key_level].keys():
                            print('–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –µ—Å—Ç—å (')
                            break
                    else:
                        if f'{level}' in json_dict:
                            json_dict_2 = json_dict[f'{level}']
                        else:
                            json_dict_2 = {}
                        json_dict_2[identifier] = name
                        json_dict[f'{level}'] = json_dict_2
                        with open(file_json, 'w', encoding='utf-8') as f:
                            json.dump(json_dict, f, ensure_ascii=False)
                            print('–ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
            else:
                print('–≠—Ç–æ –Ω–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
        else:
            print('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ "q" –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')


def create_users(file_json: str = 'users.json'):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–∞ Us, —á–∏—Ç–∞—è –∏–Ω—Ñ—É –∏–∑ JSON —Ñ–∞–π–ª–∞.

    :param file_json: JSON —Ñ–∞–π–ª,
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ.
    """
    set_users = set()
    try:
        with open(file_json, 'r', encoding='utf-8') as fj:
            try:
                json_dict = json.load(fj)
            except json.decoder.JSONDecodeError as e:
                raise e
    except FileNotFoundError as e:
        raise FileNotFoundError(f"–§–∞–π–ª–∞ '{file_json}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. {e}")
    for lev, item_ in json_dict.items():
        for ident, name in item_.items():
            a = Us(name, ident, lev)
            set_users.add(a)
    return set_users


class Us:
    """
    –ö–ª–∞—Å—Å 'Us'

     –ê—Ç—Ä–∏–±—É—Ç—ã:
    - self.name (str): –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    - self.identifier (str): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    - self.level (str | int): —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

     Dunder –º–µ—Ç–æ–¥—ã:
    - __init__(self, name, identifier, level): –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞,
    - __eq__(self, other): —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞,
    - __hash__(self): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π hash,
    - __str__(self): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞.
    """
    def __init__(self, name, identifier, level):
        self.name = name
        self.identifier = identifier
        self.level = level

    def __eq__(self, other):
        return self.identifier == other.identifier and self.name == other.name

    def __str__(self):
        return f'–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {self.identifier}, –ò–º—è: {self.name}, –£—Ä–æ–≤–µ–Ω—å: {self.level}'

    def __hash__(self):
        return hash((self.name, self.identifier, self.level))


if __name__ == '__main__':
    create_user_json('users.json')
    for item in create_users():
        print(item)
