# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
# –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.

class Value:
    # def __init__(self, param):
    #     self.param = param

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    @staticmethod
    def validate(value):
        if not isinstance(value, int):
            raise TypeError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        if value is not None and value < 1:
            raise ValueError(f'–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1')


class Generator:
    stop = Value()
    start = Value()
    step = Value()

    def __init__(self, stop: int, start: int = 1, step: int = 1):
        self.stop = stop
        self.start = start
        self.step = step
        self._count = start

    def __iter__(self):
        return self

    def __next__(self):
        while self._count <= self.stop:
            self._count += self.step
            return self._count - self.step
        raise StopIteration


if __name__ == '__main__':
    g = Generator(1)
    for i in g:
        print(i)
