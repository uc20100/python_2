# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª.

import json


class Factorial:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
    k_value (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ –ø–∞–º—è—Ç–∏
    factorial_dict (dict): –∏—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

     Dunder –º–µ—Ç–æ–¥—ã:
     __init__(self, k_value): –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞.
     __str__(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
     __repr__(): –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
     __call__(self, number): –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
     __enter__(): –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
     __exit__(self, exc_type, exc_val, exc_tb): –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """

    def __init__(self, k_value, name_json: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞.

        :param k_value: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ –ø–∞–º—è—Ç–∏
        :param name_json: –∏–º—è —Ñ–∞–π–ª–∞ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        """
        self.k_value = k_value
        self.factorial_dict = {}
        self.name_json = name_json

    def __call__(self, number):
        """
        –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª.

        :param number: —á–∏—Å–ª–æ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
        :return:
        """
        factorial = 1
        if number < 0:
            raise ValueError('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0')
        if number > 1:
            for i in range(1, number + 1):
                factorial *= i
        self.factorial_dict[number] = factorial
        if len(self.factorial_dict) > self.k_value:
            key_item = iter(self.factorial_dict.keys())
            self.factorial_dict.pop(next(key_item))

    def __str__(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

        :return:
        """
        return '\n'.join([f'–ß–∏—Å–ª–æ: {item[0]}, –§–∞–∫—Ç–æ—Ä–∏–∞–ª: {item[1]}' for item in self.factorial_dict.items()])

    def __enter__(self):
        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

        :return:
        """
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

        :param exc_type:
        :param exc_val:
        :param exc_tb:
        :return:
        """
        if not self.name_json:
            f = open('noname.json', 'w', encoding='utf-8')
        else:
            f = open(self.name_json, 'w', encoding='utf-8')
        json.dump(self.factorial_dict, f)
        # f.close()


if __name__ == '__main__':
    value_1 = Factorial(5, 'value_1.json')

    with value_1:
        value_1(8)
        value_1(7)
        value_1(0)
        value_1(1)
        value_1(2)
        value_1(3)
        value_1(4)
        value_1(5)
        value_1(6)
        value_1(10)
    print(value_1)

    print()
    value_2 = Factorial(4)
    value_2(0)
    value_2(1)
    value_2(2)
    value_2(3)
    value_2(4)
    value_2(5)
    with value_2:
        value_2(0)
    print(value_2)
