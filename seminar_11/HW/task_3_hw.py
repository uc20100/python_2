# Разработайте программу для работы с прямоугольниками. Необходимо создать класс Rectangle, который будет представлять
# прямоугольник с заданными шириной и высотой.
#
# Атрибуты класса:
#
# width (int): Ширина прямоугольника. height (int): Высота прямоугольника.
#
# Методы класса:
#
# __init__(self, width, height=None): Конструктор класса. Принимает ширину и высоту прямоугольника. Если высота не
# указана (по умолчанию None), то считается, что прямоугольник является квадратом, и высота устанавливается
# равной ширине.
#
# perimeter(self): Метод для вычисления периметра прямоугольника. Возвращает целое число - значение периметра.
#
# area(self): Метод для вычисления площади прямоугольника. Возвращает целое число - значение площади.
#
# __add__(self, other): Магический метод, который определяет операцию сложения (+) для двух прямоугольников.
# Принимает другой прямоугольник other. Создает новый прямоугольник, который представляет собой объединение
# исходных прямоугольников по периметру. Возвращает новый прямоугольник.
#
# __sub__(self, other): Магический метод, который определяет операцию вычитания (-) одного прямоугольника из другого.
# Принимает вычитаемый прямоугольник other. Создает новый прямоугольник, представляющий разницу периметров исходных
# прямоугольников, и вычисляет высоту на основе этой разницы. Возвращает новый прямоугольник.
#
# __lt__(self, other): Магический метод, который определяет операцию "меньше" (<) для двух прямоугольников.
# Принимает другой прямоугольник other. Возвращает True, если площадь первого прямоугольника меньше площади
# второго, иначе False.
#
# __eq__(self, other): Магический метод, который определяет операцию "равно" (==) для двух прямоугольников.
# Принимает другой прямоугольник other. Возвращает True, если площади равны, иначе False.
#
# __le__(self, other): Магический метод, который определяет операцию "меньше или равно" (<=) для двух прямоугольников.
# Принимает другой прямоугольник other. Возвращает True, если площадь первого прямоугольника меньше или равна
# площади второго, иначе False.
#
# __str__(self): Магический метод, возвращающий строковое представление прямоугольника. Возвращает строку,
# описывающую ширину и высоту прямоугольника.
#
# __repr__(self): Магический метод, возвращающий строковое представление прямоугольника, которое может быть
# использовано для создания нового объекта такого же класса с теми же атрибутами.
#
# Пояснение:
#
# Метод __add__ объединяет два прямоугольника по периметру и создает новый прямоугольник.
# Метод __sub__ вычитает один прямоугольник из другого, представляя разницу периметров исходных прямоугольников,
# и создает новый прямоугольник.
# Методы сравнения __lt__, __eq__ и __le__ сравнивают прямоугольники по их площади.
# Методы __str__ и __repr__ предоставляют строковое представление объекта класса Rectangle.

class Rectangle:
    """
    Класс, представляющий прямоугольник.

    Атрибуты:
    - width (int): ширина прямоугольника
    - height (int): высота прямоугольника

    Методы:
    - perimeter(): вычисляет периметр прямоугольника
    - area(): вычисляет площадь прямоугольника
    - __add__(other): определяет операцию сложения двух прямоугольников
    - __sub__(other): определяет операцию вычитания одного прямоугольника из другого
    - __lt__(other): определяет операцию "меньше" для двух прямоугольников
    - __eq__(other): определяет операцию "равно" для двух прямоугольников
    - __le__(other): определяет операцию "меньше или равно" для двух прямоугольников
    - __str__(): возвращает строковое представление прямоугольника
    - __repr__(): возвращает строковое представление прямоугольника, которое может быть использовано для создания нового объекта
    """
    def __init__(self, length, width=None):
        self.length = length
        self.width = width

    def perimeter(self):
        """
        Вычисляет периметр прямоугольника.

        :return: периметр прямоугольника
        """
        if self.width is None:
            return 4 * self.length
        else:
            return 2 * (self.length + self.width)

    def area(self):
        """
        Вычисляет площадь прямоугольника.

        :return: площадь прямоугольника
        """
        if self.width is None:
            return self.length ** 2
        else:
            return self.length * self.width

    def __add__(self, other):
        """
        Определяет операцию сложения двух прямоугольников.

        :param other: второй прямоугольник (Rectangle)
        :return: новый прямоугольник, полученный путем сложения двух исходных прямоугольников
        """
        if self.width is None:
            s_width = self.length
        else:
            s_width = self.width
        if other.width is None:
            o_width = other.lenght
        else:
            o_width = other.width
        if (self.length + other.length) == (s_width + o_width):
            return Rectangle((self.length + other.length), None)
        else:
            return Rectangle((self.length + other.length), (s_width + o_width))

    def __sub__(self, other):
        """
        Определяет операцию вычитания одного прямоугольника из другого.

        :param other: вычитаемый прямоугольник (Rectangle)
        :return: новый прямоугольник, полученный путем вычитания вычитаемого прямоугольника из исходного
        """
        if self.width is None:
            s_width = self.length
        else:
            s_width = self.width
        if other.width is None:
            o_width = other.lenght
        else:
            o_width = other.width
        if abs(self.length - other.length) == abs(s_width - o_width):
            return Rectangle(abs(self.length - other.length), None)
        else:
            return Rectangle(abs(self.length - other.length), abs(s_width - o_width))

    def __eq__(self, other):
        """
        Определяет операцию "равно" для двух прямоугольников.

        :param other: второй прямоугольник (Rectangle)
        :return: True, если равны, иначе False
        """
        return self.length == other.length and self.perimeter() == other.perimeter()

    def __lt__(self, other):
        """
        Определяет операцию "меньше" для двух прямоугольников.

        :param other: второй прямоугольник (Rectangle)
        :return: True, если периметр первого прямоугольника меньше периметра второго, иначе False
        """
        return self.perimeter() < other.perimeter()

    def __le__(self, other):
        """
        Определяет операцию "меньше или равно" для двух прямоугольников.

        :param other: второй прямоугольник (Rectangle)
        :return: True, если периметр первого прямоугольника меньше или равно периметру второго, иначе False
        """
        return self.perimeter() <= other.perimeter()

    def __str__(self):
        """
        Возвращает строковое представление прямоугольника.

        :return: строковое представление прямоугольника
        """
        if self.width is None:
            return f'Квадрат со стороной {self.length}'
        else:
            return f'Прямоугольник со сторонами {self.length} и {self.width}'

    def __repr__(self):
        """
        Возвращает строковое представление прямоугольника, которое может быть использовано для создания нового объекта.

        :return: строковое представление прямоугольника
        """
        return f'{Rectangle.__name__}({self.length}, {self.width})'


if __name__ == '__main__':
    rect1 = Rectangle(4, 5)
    rect2 = Rectangle(3, 3)

    print(rect1)
    print(rect2)

    print(rect1.perimeter())
    print(rect1.area())
    print(rect2.perimeter())
    print(rect2.area())

    rect_sum = rect1 + rect2
    rect_diff = rect1 - rect2

    print(rect_sum)
    print(rect_diff)

    print(rect1 < rect2)
    print(rect1 == rect2)
    print(rect1 <= rect2)

    print(repr(rect1))
    print(repr(rect2))

