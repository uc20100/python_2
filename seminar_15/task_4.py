# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-
# —è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

import locale
from datetime import date, datetime
import logging

locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')  # the ru locale is installed

logging.basicConfig(format='{levelname:<8} - {asctime}. {msg}, –≤ —Å—Ç—Ä–æ–∫–µ {lineno:03d}',
                    style='{',
                    filename='log_date_err.log',
                    filemode='a',
                    encoding='utf-8',
                    level=logging.ERROR,
                    datefmt='%Y-%m-%d %H:%M:%S')
logger_val = logging.getLogger(__name__)


def convert_text_to_date(date_str: str):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç date, –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.

    :param date_str: —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã;
    :return: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ date –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å.
    """
    date_str.lower()
    try:
        week, weekday, month = date_str.split()
        weekday_str = weekday
        month_str = month
        week_str = week
    except ValueError as e:
        logger_val.error(e)
        return None
    for item in ('–∞', '–µ', '–∏', '–æ', '—ç', '—é', '—è', '—É'):
        weekday = weekday.replace(item, '')
    try:
        week, _ = week.split('-')
        if month == '–º–∞—è':
            month = '–º–∞–π'
        week, weekday, month = int(week), weekday[:2].title(), month[:3].lower()
        month = datetime.strptime(month.encode('utf-8').decode('cp1251'), '%b').month
        week_iso = month * 4 + week
        date_val = datetime.strptime(
            f'{datetime.now().year} {week_iso} {month} {weekday}'.encode('utf-8').decode('cp1251'),
            '%Y %W %m %a')
        if date_val.month == month:
            return date_val.day
        else:
            logger_val.error(f'{week_str} {weekday_str} –Ω–µ—Ç –≤ {month_str}')
    except ValueError as e:
        logger_val.error(str(e).encode('cp1251').decode('utf-8'))
    return None


if __name__ == '__main__':
    print(convert_text_to_date('1-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–æ—è–±—Ä—è'))
