# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í
# —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π
# –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
# –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ,
# —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

import locale
from datetime import date, datetime
import logging
import argparse


locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')  # the ru locale is installed

logging.basicConfig(format='{levelname:<8} - {asctime}. {msg}, –≤ —Å—Ç—Ä–æ–∫–µ {lineno:03d}',
                    style='{',
                    filename='log_date_err_2.log',
                    filemode='a',
                    encoding='utf-8',
                    level=logging.ERROR,
                    datefmt='%Y-%m-%d %H:%M:%S')
logger_val = logging.getLogger(__name__)


def convert_text_to_date(date_str: str):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç date, –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.

    :param date_str: —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã;
    :return: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ date –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å.
    """
    date_str.lower()
    try:
        week, weekday, month = date_str.split()
        month_str = month
        week_str = week
    except ValueError as e:
        logger_val.error(e)
        return None
    for item_ in ('–∞', '–µ', '–∏', '–æ', '—ç', '—é', '—è', '—É'):
        weekday = weekday.replace(item_, '')

    if not week.isdigit():
        try:
            week, _ = week.split('-')
            week = int(week)
        except ValueError:
            logger_val.error(f'–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ "{week_str}"')
            return None
    else:
        week = int(week)

    if not month.isdigit():
        if month == '–º–∞—è':
            month = '–º–∞–π'
        month = month[:3].lower().encode('utf-8').decode('cp1251')
        try:
            month = datetime.strptime(month, '%b').month
        except ValueError:
            logger_val.error(f'–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ "{month_str}"')
            return None
    else:
        month = int(month)

    if not weekday.isdigit():
        weekday = weekday[:2].title().encode('utf-8').decode('cp1251')
    else:
        weekday = int(weekday)
    # –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—è—Ü–∞
    week_iso = datetime(datetime.now().year, month, 2, ).isocalendar().week

    try:
        # –¢–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ–¥–∞, –º–µ—Å—è—Ü–∞, –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        char_ = 'a' if isinstance(weekday, str) else 'u'

        test_moth = datetime.strptime(
            f'{datetime.now().year} {week_iso} {weekday}', f'%Y %W %{char_}').month
        if test_moth != month:
            week_iso += week
        else:
            week_iso += week - 1
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ–¥–∞, –º–µ—Å—è—Ü–∞, –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
        date_val = datetime.strptime(
            f'{datetime.now().year} {week_iso} {weekday}', f'%Y %W %{char_}')

        if date_val.month != month:
            logger_val.error(f'–ó–∞–¥–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "{week_str}"')
            return None
    except ValueError:
        logger_val.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—É')
        return None

    return date_val.day


if __name__ == '__main__':
    # str_date = ['1-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —è–Ω–≤–∞—Ä—è', '1 1 1', '1-–π –≤—Ç–æ—Ä–Ω–∏–∫ —Ñ–µ–≤—Ä–∞–ª—è', '1-—è —Å—Ä–µ–¥–∞ –º–∞—Ä—Ç–∞',
    #             '1-–π –ß–¢ –ê–ü–†', '3-—è —Å—Ä–µ–¥–∞ –º–∞—è', '3 3 5', '1-—è —Å—É–±–± –∏—é–Ω—å',
    #             '1-–π –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏—é–ª—è', '1-–π –ø–æ–Ω–µ–¥ –∞–≤–≥—É—Å', '1-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–µ–Ω—Ç—è–±—Ä—å',
    #             '1-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –æ–∫—Ç—è–±—Ä—è', '4-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–æ—è–±—Ä—è', '2-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–µ–∫–∞–±—Ä—è', '2 1 12']
    #
    # for item in str_date:
    #     print(f'{item} - {convert_text_to_date(item)}')

    parser = argparse.ArgumentParser(description='–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞')
    parser.add_argument('-week', metavar='week', type=str,
                        help='–Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –º–µ—Å—è—Ü–µ (1-5)', default=1)
    parser.add_argument('-weekday', metavar='weekday', type=str,
                        help='–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ 1-7)', default=datetime.now().isoweekday())
    parser.add_argument('-month', metavar='month', type=str,
                        help='–º–µ—Å—è—Ü –≥–æ–¥–∞ (—è–Ω–≤–∞—Ä—å-–¥–µ–∫–∞–±—Ä—å –∏–ª–∏ 1-12)', default=datetime.now().month)
    args = parser.parse_args()
    print(f"-week:{args.week}, -weekday:{args.weekday}, -month:{args.month}, "
          f"result_day:{convert_text_to_date(f'{args.week} {args.weekday} {args.month}')}")

    # –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    # python task_5.py -week 1 -weekday 1 -month 1
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # python task_5.py --help
