# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í
# —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π
# –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
# –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ,
# —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.

import locale
from datetime import date, datetime
import logging

# –õ–æ–∫–∞–ª—å –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫—É utf-8, –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É—é –≤ —Ñ—É–Ω–∫—Ü–∏–∏
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')  # the ru locale is installed

logging.basicConfig(format='{levelname:<8} - {asctime}. {msg}, –≤ —Å—Ç—Ä–æ–∫–µ {lineno:03d}',
                    style='{',
                    filename='log_date_err_2.log',
                    filemode='a',
                    encoding='utf-8',
                    level=logging.ERROR,
                    datefmt='%Y-%m-%d %H:%M:%S')
logger_val = logging.getLogger(__name__)


def convert_text_to_date(date_str: str):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç date, –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.

    :param date_str: —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã;
    :return: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ date –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å.
    """
    date_str.lower()
    try:
        week, weekday, month = date_str.split()
        weekday_str = weekday
        month_str = month
        week_str = week
    except ValueError as e:
        logger_val.error(e)
        return None
    for item in ('–∞', '–µ', '–∏', '–æ', '—ç', '—é', '—è', '—É'):
        weekday = weekday.replace(item, '')
    try:
        if not week.isdigit():
            week, _ = week.split('-')
            week = int(week)
        else:
            week = int(week)

        if not month.isdigit():
            if month == '–º–∞—è':
                month = '–º–∞–π'
            month = month[:3].lower()
            month = datetime.strptime(month.encode('utf-8').decode('cp1251'), '%b').month
        else:
            month = int(month)

        if not weekday.isdigit():
            weekday = weekday[:2].title()
        else:
            weekday = int(weekday)

        week_iso = month * 4 + week
        if isinstance(weekday, str):
            date_val = datetime.strptime(
                f'{datetime.now().year} {week_iso} {month} {weekday}'.encode('utf-8').decode('cp1251'),
                '%Y %W %m %a')
        else:
            date_val = datetime.strptime(
                f'{datetime.now().year} {week_iso} {month} {weekday}'.encode('utf-8').decode('cp1251'),
                '%Y %W %m %u')

        if date_val.month == month:
            return date_val.day
        else:
            logger_val.error(f'week = {week_str}, weekday = {weekday_str}, month = {month_str}')
    except ValueError as e:
        logger_val.error(str(e).encode('cp1251').decode('utf-8'))
    return None


if __name__ == '__main__':
    print(convert_text_to_date('4 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–æ—è–±—Ä–µ'))
