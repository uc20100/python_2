# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
# üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
# ‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
# ‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
# ‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
# ‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
# ‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π
# –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë
# —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
# –º–æ–¥—É–ª—å logging.

"""
–ú–æ–¥—É–ª—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ JSON —Ñ–∞–π–ª
"""
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª
# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω
# —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
# üìå –ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á
# json —Å–ª–æ–≤–∞—Ä—è.
# üìå –î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç
# –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# üìå –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π
# —Ñ—É–Ω–∫—Ü–∏–∏.

import random
from functools import wraps
from typing import Callable
import logging

__all__ = ['log_file', 'random_number']

logging.basicConfig(format='{levelname:<8} - {asctime}. {msg}',
                    style='{',
                    filename='log_info_2.log',
                    filemode='a',
                    encoding='utf-8',
                    level=logging.INFO,
                    datefmt='%Y-%m-%d %H:%M:%S')
logger_val = logging.getLogger(__name__)


def log_file(logger: logging.Logger):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.

    :param logger: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    :return:
    """

    def info_func(func: Callable):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.

        :param func: –î–µ–∫–æ—Ä–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        :return:
        """

        @wraps(func)
        def write_log(*args, **kwargs):
            """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ log —Ñ–∞–π–ª–∞.

            :param args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,
            :param kwargs: –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã,
            :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
            """
            a = str(args).replace('(', '').replace(')', '')
            k = str(kwargs).replace("{'", '').replace("': ", '=').replace("}", '')
            result_value = func(*args, **kwargs)
            mes = f'–§—É–Ω–∫—Ü–∏—è "{func.__name__}()", –ê—Ä–≥—É–º–µ–Ω—Ç—ã: ({a}, {k}), –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_value}'
            logger.info(mes)
            return result_value

        return write_log

    return info_func


@log_file(logger_val)
def random_number(rand_min: int, rand_max: int, /, *, info_str: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞.

    :param rand_min: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞;
    :param rand_max: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞;
    :param info_str: —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏;
    :return: —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    return info_str + ' ' + str(random.randint(rand_min, rand_max))


if __name__ == '__main__':
    print(random_number(1, 10, info_str='–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ:'))

