# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 1 —Ç–µ—Å—Ç—ã unittest. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ
# —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏
# —Å–∏–º–≤–æ–ª–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –±—É–∫–≤ –¥—Ä—É–≥–∏—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
# üìå –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
# (–∫—Ä–æ–º–µ –ø. 1)

import unittest
from task_1 import modification_str


class TestModification(unittest.TestCase):
    def test_without_changes(self):
        self.assertEqual(modification_str('Hello World, –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!'), 'Hello World, –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!','–¢–µ—Å—Ç1 –ø—Ä–æ–≤–∞–ª–µ–Ω')

    def test_small_case(self):
        self.assertEqual(modification_str('Hello World, –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!'), 'hello world, –ø—Ä–∏–≤–µ—Ç –º–∏—Ä!','–¢–µ—Å—Ç2 –ø—Ä–æ–≤–∞–ª–µ–Ω')

    def test_no_punctuation(self):
        self.assertEqual(modification_str('Hello World, –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!'), 'Hello World –ü—Ä–∏–≤–µ—Ç –º–∏—Ä','–¢–µ—Å—Ç3 –ø—Ä–æ–≤–∞–ª–µ–Ω')

    def test_only_latin(self):
        self.assertEqual(modification_str('Hello World, –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!'), 'Hello World,  !','–¢–µ—Å—Ç4 –ø—Ä–æ–≤–∞–ª–µ–Ω')

    def test_all_conditions(self):
        self.assertEqual(modification_str('Hello World, –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!'), 'hello world  ','–¢–µ—Å—Ç5 –ø—Ä–æ–≤–∞–ª–µ–Ω')


if __name__ == '__main__':
    unittest.main()
